name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  ARM_TOOLCHAIN_VERSION: "13.2.Rel1"

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup HAL Library
      run: |
        chmod +x setup_hal.sh
        ./setup_hal.sh
        
    - name: Install static analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
        
    - name: Install ARM GCC Toolchain
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/${{ env.ARM_TOOLCHAIN_VERSION }}/binrel/arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz
        echo "$PWD/arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi/bin" >> $GITHUB_PATH
        
    - name: Generate compile commands
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_TOOLCHAIN_FILE=../cmake/arm-none-eabi-gcc.cmake \
              ..

    - name: Run Cppcheck
      run: |
        cppcheck --enable=all \
                 --inconclusive \
                 --xml \
                 --xml-version=2 \
                 --project=build/compile_commands.json \
                 --suppressions-list=.cppcheck-suppressions \
                 2> cppcheck-report.xml || true
                 --xml \
                 --xml-version=2 \
                 --project=build/compile_commands.json \
                 --suppressions-list=<(echo "missingIncludeSystem") \
                 2> cppcheck-report.xml || true
                 
    - name: Run Clang-Tidy
      run: |
        cd build
        run-clang-tidy -p . \
                       -header-filter='.*' \
                       -checks='-*,readability-*,performance-*,bugprone-*,clang-analyzer-*,modernize-*' \
                       > ../clang-tidy-report.txt 2>&1 || true
                       
    - name: Upload static analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-reports
        path: |
          cppcheck-report.xml
          clang-tidy-report.txt
        retention-days: 30

  build:
    name: Build Firmware
    runs-on: ubuntu-latest
    needs: static-analysis
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup HAL Library
      run: |
        chmod +x setup_hal.sh
        ./setup_hal.sh
        
    - name: Install ARM GCC Toolchain
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/${{ env.ARM_TOOLCHAIN_VERSION }}/binrel/arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz
        echo "$PWD/arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi/bin" >> $GITHUB_PATH
        
    - name: Verify toolchain installation
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-objcopy --version
        
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_TOOLCHAIN_FILE=../cmake/arm-none-eabi-gcc.cmake \
              ..
              
    - name: Build firmware
      run: |
        cd build
        make -j$(nproc)
        
    - name: Generate build info
      run: |
        cd build
        echo "Build Type: ${{ matrix.build_type }}" > build-info.txt
        echo "Commit: ${{ github.sha }}" >> build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> build-info.txt
        echo "Build Date: $(date)" >> build-info.txt
        
        if [ -f stm32f103_led_blink.elf ]; then
          echo "=== ELF File Info ===" >> build-info.txt
          arm-none-eabi-size stm32f103_led_blink.elf >> build-info.txt
          echo "" >> build-info.txt
          echo "=== Memory Usage ===" >> build-info.txt
          arm-none-eabi-objdump -h stm32f103_led_blink.elf >> build-info.txt
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.build_type }}
        path: |
          build/*.elf
          build/*.hex
          build/*.bin
          build/build-info.txt
        retention-days: 30
        
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit Security Scan (for Python scripts)
      run: |
        if find . -name "*.py" -type f | head -1 | grep -q .; then
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
        else
          echo "No Python files found, skipping Bandit scan"
          echo "{}" > bandit-report.json
        fi
        
    - name: Run Semgrep Security Scan
      run: |
        pip install semgrep
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      run: |
        # Create a basic Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          sed -i 's/PROJECT_NAME           = "My Project"/PROJECT_NAME           = "STM32F103 LED Blink"/' Doxyfile
          sed -i 's/INPUT                  =/INPUT                  = src include/' Doxyfile
          sed -i 's/RECURSIVE              = NO/RECURSIVE              = YES/' Doxyfile
          sed -i 's/GENERATE_HTML          = YES/GENERATE_HTML          = YES/' Doxyfile
          sed -i 's/HTML_OUTPUT            = html/HTML_OUTPUT            = docs/' Doxyfile
        fi
        doxygen
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 30